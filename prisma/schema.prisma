generator client {
  provider = "prisma-client-js"
  output   = "./"
}

datasource db {
  provider  = "cockroachdb"
  url       = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  phoneNumber   String
  accounts      Account[]
  carts         Cart[]
  orders        Order[]
  addresss      Address[]

  @@unique([email])
  @@unique([phoneNumber])
  @@map("user")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Product {
  id            String    @id
  name          String
  description   String
  price         Int
  originalPrice Int
  limit         Int
  images        String[]
  sizes         String[]
  category      String
  qikinkSku     String
  designUrl     String
  logoUrl       String
  createdAt     DateTime?
  updatedAt     DateTime?

  @@unique([id])
  @@map("product")
}

model Cart {
  id        String   @id
  items     String[]
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime
  updatedAt DateTime
  orders    Order[]

  @@unique([id])
  @@unique([userId])
  @@map("cart")
}

model Order {
  id        String   @id
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  status    String
  createdAt DateTime
  updatedAt DateTime

  @@map("order")
}

model Address {
  id             String   @id
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  houseNumber    String
  street         String
  additionalInfo String?
  landmark       String?
  city           String
  stateOrUT      String
  pincode        String
  isDefault      Boolean
  createdAt      DateTime
  updatedAt      DateTime

  @@map("address")
}
